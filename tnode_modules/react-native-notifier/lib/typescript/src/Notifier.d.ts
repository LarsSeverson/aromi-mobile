import React from 'react';
import { Animated } from 'react-native';
import { Notification as NotificationComponent } from './components';
import type { ShowNotificationParams, StateInterface, NotifierInterface, NotifierProps } from './types';
export declare const Notifier: NotifierInterface;
export declare class NotifierRoot extends React.PureComponent<NotifierProps, StateInterface> {
    private isShown;
    private isHiding;
    private hideTimer;
    private showParams;
    private callStack;
    private hiddenComponentValue;
    private readonly translateY;
    private readonly translateYInterpolated;
    private readonly onGestureEvent;
    constructor(props: NotifierProps);
    componentWillUnmount(): void;
    hideNotification(callback?: Animated.EndCallback): void;
    showNotification<ComponentType extends React.ElementType = typeof NotificationComponent>(functionParams: ShowNotificationParams<ComponentType>): void;
    clearQueue(hideDisplayedNotification?: boolean): void;
    private setHideTimer;
    private onStartHiding;
    private onHidden;
    private onHandlerStateChange;
    private onPress;
    private onLayout;
    render(): import("react/jsx-runtime").JSX.Element;
}
//# sourceMappingURL=Notifier.d.ts.map