"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.KeyboardScrollView = void 0;
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
const KeyboardScrollView = _ref => {
  let {
    children,
    additionalScrollHeight,
    contentContainerStyle,
    ...props
  } = _ref;
  const scrollViewRef = (0, _react.useRef)(null);
  const scrollPositionRef = (0, _react.useRef)(0);
  const scrollContentSizeRef = (0, _react.useRef)(0);
  const scrollViewSizeRef = (0, _react.useRef)(0);
  const [isKeyboardVisible, setIsKeyboardVisible] = (0, _react.useState)(false);
  const [additionalPadding, setAdditionalPadding] = (0, _react.useState)(0);
  const scrollToPosition = (0, _react.useCallback)((toPosition, animated) => {
    scrollViewRef.current?.scrollTo({
      y: toPosition,
      animated: !!animated
    });
    scrollPositionRef.current = toPosition;
  }, []);
  const additionalScroll = (0, _react.useMemo)(() => additionalScrollHeight ?? 0, [additionalScrollHeight]);
  const androidStatusBarOffset = (0, _react.useMemo)(() => _reactNative.StatusBar.currentHeight ?? 0, []);
  (0, _react.useEffect)(() => {
    const didShowListener = _reactNative.Keyboard.addListener('keyboardDidShow', frames => {
      const keyboardY = frames.endCoordinates.screenY;
      if (_reactNative.Platform.OS === 'ios') {
        const keyboardHeight = frames.endCoordinates.height;
        setAdditionalPadding(keyboardHeight);
      }
      setTimeout(() => {
        setIsKeyboardVisible(true);
      }, 100);
      const currentlyFocusedInput = _reactNative.TextInput.State.currentlyFocusedInput();
      const currentScrollY = scrollPositionRef.current;
      currentlyFocusedInput?.measureInWindow((_x, y, _width, height) => {
        const endOfInputY = y + height + androidStatusBarOffset;
        const deltaToScroll = endOfInputY - keyboardY;
        if (deltaToScroll < 0) return;
        const scrollPositionTarget = currentScrollY + deltaToScroll + additionalScroll;
        scrollToPosition(scrollPositionTarget, true);
      });
    });
    const didHideListener = _reactNative.Keyboard.addListener('keyboardDidHide', () => {
      setAdditionalPadding(0);
      setIsKeyboardVisible(false);
    });
    const willHideListener = _reactNative.Keyboard.addListener('keyboardWillHide', frames => {
      // iOS only, scroll back to initial position to avoid flickering
      const keyboardHeight = frames.endCoordinates.height;
      const currentScrollY = scrollPositionRef.current;

      /*
        Added this early return to avoid a bug with react-navigation, where moving from a screen to another, this event was triggered twice
        In any case, no need to scroll back if we are already at the top so this early return should be safe
      */
      if (currentScrollY <= 0) return;
      const scrollPositionTarget = currentScrollY - keyboardHeight;
      scrollToPosition(scrollPositionTarget, true);
    });
    return () => {
      didShowListener.remove();
      didHideListener.remove();
      willHideListener.remove();
    };
  }, [additionalScroll, androidStatusBarOffset, scrollToPosition]);
  return /*#__PURE__*/_react.default.createElement(_reactNative.ScrollView, _extends({
    ref: scrollViewRef,
    contentContainerStyle: [contentContainerStyle],
    contentInset: {
      bottom: additionalPadding
    },
    keyboardShouldPersistTaps: "handled",
    onMomentumScrollEnd: event => {
      scrollPositionRef.current = event.nativeEvent.contentOffset.y;
    },
    onScrollEndDrag: event => {
      scrollPositionRef.current = event.nativeEvent.contentOffset.y;
    },
    onLayout: event => {
      scrollViewSizeRef.current = event.nativeEvent.layout.height;
    },
    onContentSizeChange: (_width, height) => {
      const currentContentHeight = scrollContentSizeRef.current;
      const contentSizeDelta = height - currentContentHeight;
      scrollContentSizeRef.current = height;
      if (!isKeyboardVisible) return;
      const currentScrollY = scrollPositionRef.current;
      const scrollPositionTarget = currentScrollY + contentSizeDelta;
      scrollToPosition(scrollPositionTarget, true);
    }
  }, props), children);
};
exports.KeyboardScrollView = KeyboardScrollView;
//# sourceMappingURL=KeyboardScrollView.js.map