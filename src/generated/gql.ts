/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
    "\n  query Fragrance(\n    $fragranceId: Int!\n    $imagesInput: QueryInput = {\n      pagination: {\n        first: 5 \n      }\n    }\n    $accordsInput: AccordsInput = {\n      pagination: {\n        first: 8,\n        sort: {\n          by: votes\n        }\n      }\n    }\n    $notesInput: NotesInput = {\n      pagination: {\n        first: 8,\n        sort: {\n          by: votes\n        }\n      }\n    }\n    $reviewsInput: QueryInput = {\n      pagination: {\n        first: 10,\n        sort: {\n          by: votes\n        }\n      }\n    }\n  ) {\n    fragrance(id: $fragranceId) {\n      id\n      brand\n      name\n      rating\n      reviewsCount\n\n      votes {\n        id\n        likes\n        dislikes\n        myVote\n      }\n\n      images(input: $imagesInput) {\n        edges {\n          node {\n            id\n            url\n          }\n        }\n      }\n\n      traits {\n        gender {\n          id\n          value\n          trait\n          myVote\n        }\n        longevity {\n          id\n          value\n          trait\n          myVote\n        }\n        sillage {\n          id\n          value\n          trait\n          myVote\n        }\n        complexity {\n          id\n          value\n          trait\n          myVote\n        }\n        balance {\n          id\n          value\n          trait\n          myVote\n        }\n        allure {\n          id\n          value\n          trait\n          myVote\n        }\n      }\n\n      accords(input: $accordsInput) {\n        edges {\n          node {\n            id\n            accordId\n            name\n            color\n            votes\n            myVote\n          }\n        }\n      }\n\n      notes {\n        fragranceId\n        top(input: $notesInput) {\n          edges {\n            node {\n              id\n              noteId\n              name\n              icon\n              votes\n              layer\n              myVote\n            }\n          }\n        }\n        middle(input: $notesInput) {\n          edges {\n            node {\n              id\n              noteId\n              name\n              icon\n              votes\n              layer\n              myVote\n            }\n          }\n        }\n        base(input: $notesInput) {\n          edges {\n            node {\n              id\n              noteId\n              name\n              icon\n              votes\n              layer\n              myVote\n            }\n          }\n        }\n      }\n      reviews(input: $reviewsInput) {\n        edges {\n          node {\n            id\n            author\n            rating\n            review\n            votes\n            myVote\n            dCreated\n            dModified\n            dDeleted\n          }\n        }\n      }\n    }\n  }\n": typeof types.FragranceDocument,
    "\n  query FragranceAccords(\n    $fragranceId: Int!\n    $accordsInput: AccordsInput = {\n      pagination: {\n        first: 30 \n        sort: {\n          by: votes\n        }\n      }\n      fill: true\n    }\n  ) {\n    fragrance(id: $fragranceId) {\n      id\n      accords(input: $accordsInput) {\n        edges {\n          node {\n            id\n            accordId\n            name\n            color\n            votes\n            myVote\n          }\n        }\n        pageInfo {\n          hasNextPage\n          hasPreviousPage\n          startCursor\n          endCursor\n        }\n      }\n    }\n  }\n": typeof types.FragranceAccordsDocument,
    "\n  query FragranceNotes(\n    $fragranceId: Int!\n    $includeTop: Boolean = false\n    $includeMiddle: Boolean = false\n    $includeBase: Boolean = false\n    $notesInput: NotesInput = {\n      pagination: {\n        first: 12 \n        sort: {\n          by: votes\n        }\n      }\n      fill: false\n    }\n  ) {\n    fragrance(id: $fragranceId) {\n      id\n      notes {\n        top(input: $notesInput) @include(if: $includeTop) {\n          edges {\n            node {\n              id\n              noteId\n              name\n              icon\n              layer\n              votes\n              myVote\n            }\n          }\n          pageInfo {\n            hasPreviousPage\n            hasNextPage\n            startCursor\n            endCursor\n          }\n        }\n        middle(input: $notesInput) @include(if: $includeMiddle) {\n          edges {\n            node {\n              id\n              noteId\n              name\n              icon\n              layer\n              votes\n              myVote\n            }\n          }\n          pageInfo {\n            hasPreviousPage\n            hasNextPage\n            startCursor\n            endCursor\n          }\n        }\n        base(input: $notesInput) @include(if: $includeBase) {\n          edges {\n            node {\n              id\n              noteId\n              name\n              icon\n              layer\n              votes\n              myVote\n            }\n          }\n          pageInfo {\n            hasPreviousPage\n            hasNextPage\n            startCursor\n            endCursor\n          }\n        }\n      }\n    }\n  }\n": typeof types.FragranceNotesDocument,
    "\n  query FragranceNotesLayer(\n    $fragranceId: Int!\n    $includeTop: Boolean = false\n    $includeMiddle: Boolean = false\n    $includeBase: Boolean = false\n    $notesInput: NotesInput = {\n      pagination: {\n        first: 30\n        sort: {\n          by: votes\n        }\n      }\n      fill: false\n    }\n  ) {\n    fragrance(id: $fragranceId) {\n      id\n      notes {\n        top(input: $notesInput) @include(if: $includeTop) {\n          edges {\n            node {\n              id\n              noteId\n              name\n              icon\n              layer\n              votes\n              myVote\n            }\n          }\n          pageInfo {\n            hasPreviousPage\n            hasNextPage\n            startCursor\n            endCursor\n          }\n        }\n        middle(input: $notesInput) @include(if: $includeMiddle) {\n          edges {\n            node {\n              id\n              noteId\n              name\n              icon\n              layer\n              votes\n              myVote\n            }\n          }\n          pageInfo {\n            hasPreviousPage\n            hasNextPage\n            startCursor\n            endCursor\n          }\n        }\n        base(input: $notesInput) @include(if: $includeBase) {\n          edges {\n            node {\n              id\n              noteId\n              name\n              icon\n              layer\n              votes\n              myVote\n            }\n          }\n          pageInfo {\n            hasPreviousPage\n            hasNextPage\n            startCursor\n            endCursor\n          }\n        }\n      }\n    }\n  }\n": typeof types.FragranceNotesLayerDocument,
    "\n  query FragranceReviews(\n    $fragranceId: Int!\n    $reviewsInput: QueryInput = {\n      pagination: {\n        first: 20\n        sort: {\n          by: votes\n        }\n      }\n    }\n  ) {\n    fragrance(id: $fragranceId) {\n      id\n      brand\n      name\n      rating\n      reviewsCount\n      reviews(input: $reviewsInput) {\n        edges {\n          node {\n            id\n            rating\n            review\n            votes\n            dCreated\n            dModified\n            dDeleted\n            author \n            myVote\n          }\n        }\n        pageInfo {\n          hasPreviousPage\n          hasNextPage\n          startCursor\n          endCursor\n        }\n      }\n      reviewDistribution {\n        one\n        two\n        three\n        four\n        five\n      }\n    }\n  }\n": typeof types.FragranceReviewsDocument,
    "\n  query FragranceTraits($fragranceId: Int!) {\n    fragrance(id: $fragranceId) {\n      id\n      traits {\n        gender {\n          id\n          trait\n          value\n          myVote\n        }\n        longevity {\n          id\n          trait\n          value\n          myVote\n        }\n        sillage {\n          id\n          trait\n          value\n          myVote\n        }\n        complexity {\n          id\n          trait\n          value\n          myVote\n        }\n        balance {\n          id\n          trait\n          value\n          myVote\n        }\n        allure {\n          id\n          trait\n          value\n          myVote\n        }\n      }\n    }\n  }\n": typeof types.FragranceTraitsDocument,
    "\n  query MyReview($fragranceId: Int!) {\n    fragrance(id: $fragranceId) {\n      id\n      myReview {\n        id\n        rating\n        review\n        votes\n        dCreated\n        dModified\n        dDeleted\n        author \n        myVote\n      }\n    }\n  }\n": typeof types.MyReviewDocument,
    "\n  mutation ReviewFragrance($fragranceId: Int!, $myRating: Int!, $myReview: String!) {\n    reviewFragrance(fragranceId: $fragranceId, myRating: $myRating, myReview: $myReview) {\n      id\n      rating\n      review\n      votes\n      myVote\n      dCreated\n      dModified\n      author \n    }\n  }\n": typeof types.ReviewFragranceDocument,
    "\n  query SuggestedFragrances(\n    $input: QueryInput = { \n      pagination: { \n        first: 20\n      }\n    }\n    $imagesInput: QueryInput = { \n      pagination: { \n        first: 1\n      }\n    }\n  ) {\n    fragrances(input: $input) {\n      edges {\n        node {\n          id\n          brand\n          name\n          votes {\n            id\n            dislikes\n            likes\n            myVote\n          }\n          images(input: $imagesInput) {\n            edges {\n              node {\n                id\n                url\n              }\n            }\n          }\n        }\n        cursor\n      }\n      pageInfo {\n        hasPreviousPage\n        hasNextPage\n        startCursor\n        endCursor\n      }\n    }\n  } \n": typeof types.SuggestedFragrancesDocument,
    "\n  mutation UpsertUser($email: String!, $cognitoId: String!) {\n    upsertUser(email: $email, cognitoId: $cognitoId) {\n      id\n      email\n      username\n      cognitoId\n      followers\n      following\n    }\n  }\n": typeof types.UpsertUserDocument,
    "\n  query UserCollections(\n    $userId: Int!\n    $collectionsInput: QueryInput = {\n      pagination: {\n        first: 20\n      }\n    }\n    $collectionItemsInput: QueryInput = {\n      pagination: {\n        first: 4\n        sort: {\n          by: added\n          direction: asc\n        }\n      }\n    }\n    $imagesInput: QueryInput = {\n      pagination: {\n        first: 1\n      }\n    }\n  ) {\n    user(id: $userId) {\n      id\n      collections(input: $collectionsInput) {\n        pageInfo {\n          hasPreviousPage\n          hasNextPage\n          startCursor\n          endCursor\n        }\n        edges {\n          node {\n            id\n            name\n            items(input: $collectionItemsInput) {\n              edges {\n                node {\n                  id\n                  fragrance {\n                    id\n                    images(input: $imagesInput) {\n                      edges {\n                        node {\n                          id\n                          url\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n            user {\n              id\n              username\n            }\n          }\n        }\n      }\n    }\n  }\n": typeof types.UserCollectionsDocument,
    "\n  query UserInfo(\n    $userId: Int!\n  ) {\n    user(id: $userId) {\n      id\n      username\n      followers\n      following\n    }\n  }\n": typeof types.UserInfoDocument,
    "\n  query UserLikes(\n    $userId: Int!\n    $likesInput: QueryInput = {\n      pagination: {\n        first: 20\n      }\n    }\n    $imagesInput: QueryInput = {\n      pagination: {\n        first: 1\n      }\n    }\n  ) {\n    user(id: $userId) {\n      id\n      likes(input: $likesInput) {\n        pageInfo {\n          hasPreviousPage\n          hasNextPage\n          startCursor\n          endCursor\n        }\n        edges {\n          node {\n            id\n            brand\n            name\n            images(input: $imagesInput) {\n              edges {\n                node {\n                  id\n                  url\n                }\n              }\n            }\n            votes {\n              id\n              likes\n              dislikes\n              myVote\n            }\n          }\n        }\n      }\n    }\n  }\n": typeof types.UserLikesDocument,
    "\n  query UserReviews(\n    $userId: Int!\n    $reviewsInput: QueryInput = {\n      pagination: {\n        first: 20 \n      }\n    }\n  ) {\n    user(id: $userId) {\n      id\n      reviews(input: $reviewsInput) {\n        pageInfo {\n          hasPreviousPage\n          hasNextPage\n          startCursor\n          endCursor\n        }\n        edges {\n          node {\n            id\n            author\n            rating\n            review\n            votes\n            dCreated\n            dModified\n          }\n        }\n      }\n    }\n  }\n": typeof types.UserReviewsDocument,
    "\n  mutation VoteOnAccord($fragranceId: Int!, $accordId: Int!, $myVote: Boolean!) {\n    voteOnAccord(fragranceId: $fragranceId, accordId: $accordId, myVote: $myVote) {\n      id\n      votes\n      myVote\n    }\n  }\n": typeof types.VoteOnAccordDocument,
    "\n  mutation VoteOnFragance($fragranceId: Int!, $myVote: Boolean) {\n    voteOnFragrance(fragranceId: $fragranceId, myVote: $myVote) {\n      id\n      likes\n      dislikes\n      myVote\n    } \n  }\n": typeof types.VoteOnFraganceDocument,
    "\n  mutation VoteOnNote($fragranceId: Int!, $noteId: Int!, $layer: NoteLayer!, $myVote: Boolean!) {\n    voteOnNote(fragranceId: $fragranceId, noteId: $noteId, layer: $layer, myVote: $myVote) {\n      id\n      noteId\n      layer\n      votes\n      myVote\n    }\n  }\n": typeof types.VoteOnNoteDocument,
    "\n  mutation VoteOnReview($reviewId: Int!, $myVote: Boolean) {\n    voteOnReview(reviewId: $reviewId, myVote: $myVote) {\n      id\n      votes\n      myVote\n    }\n  }\n": typeof types.VoteOnReviewDocument,
    "\n  mutation VoteOnTrait($fragranceId: Int!, $trait: FragranceTraitType!, $myVote: Float!) {\n    voteOnTrait(fragranceId: $fragranceId, trait: $trait, myVote: $myVote) {\n      id\n      trait\n      value\n      myVote\n    }\n  }\n": typeof types.VoteOnTraitDocument,
};
const documents: Documents = {
    "\n  query Fragrance(\n    $fragranceId: Int!\n    $imagesInput: QueryInput = {\n      pagination: {\n        first: 5 \n      }\n    }\n    $accordsInput: AccordsInput = {\n      pagination: {\n        first: 8,\n        sort: {\n          by: votes\n        }\n      }\n    }\n    $notesInput: NotesInput = {\n      pagination: {\n        first: 8,\n        sort: {\n          by: votes\n        }\n      }\n    }\n    $reviewsInput: QueryInput = {\n      pagination: {\n        first: 10,\n        sort: {\n          by: votes\n        }\n      }\n    }\n  ) {\n    fragrance(id: $fragranceId) {\n      id\n      brand\n      name\n      rating\n      reviewsCount\n\n      votes {\n        id\n        likes\n        dislikes\n        myVote\n      }\n\n      images(input: $imagesInput) {\n        edges {\n          node {\n            id\n            url\n          }\n        }\n      }\n\n      traits {\n        gender {\n          id\n          value\n          trait\n          myVote\n        }\n        longevity {\n          id\n          value\n          trait\n          myVote\n        }\n        sillage {\n          id\n          value\n          trait\n          myVote\n        }\n        complexity {\n          id\n          value\n          trait\n          myVote\n        }\n        balance {\n          id\n          value\n          trait\n          myVote\n        }\n        allure {\n          id\n          value\n          trait\n          myVote\n        }\n      }\n\n      accords(input: $accordsInput) {\n        edges {\n          node {\n            id\n            accordId\n            name\n            color\n            votes\n            myVote\n          }\n        }\n      }\n\n      notes {\n        fragranceId\n        top(input: $notesInput) {\n          edges {\n            node {\n              id\n              noteId\n              name\n              icon\n              votes\n              layer\n              myVote\n            }\n          }\n        }\n        middle(input: $notesInput) {\n          edges {\n            node {\n              id\n              noteId\n              name\n              icon\n              votes\n              layer\n              myVote\n            }\n          }\n        }\n        base(input: $notesInput) {\n          edges {\n            node {\n              id\n              noteId\n              name\n              icon\n              votes\n              layer\n              myVote\n            }\n          }\n        }\n      }\n      reviews(input: $reviewsInput) {\n        edges {\n          node {\n            id\n            author\n            rating\n            review\n            votes\n            myVote\n            dCreated\n            dModified\n            dDeleted\n          }\n        }\n      }\n    }\n  }\n": types.FragranceDocument,
    "\n  query FragranceAccords(\n    $fragranceId: Int!\n    $accordsInput: AccordsInput = {\n      pagination: {\n        first: 30 \n        sort: {\n          by: votes\n        }\n      }\n      fill: true\n    }\n  ) {\n    fragrance(id: $fragranceId) {\n      id\n      accords(input: $accordsInput) {\n        edges {\n          node {\n            id\n            accordId\n            name\n            color\n            votes\n            myVote\n          }\n        }\n        pageInfo {\n          hasNextPage\n          hasPreviousPage\n          startCursor\n          endCursor\n        }\n      }\n    }\n  }\n": types.FragranceAccordsDocument,
    "\n  query FragranceNotes(\n    $fragranceId: Int!\n    $includeTop: Boolean = false\n    $includeMiddle: Boolean = false\n    $includeBase: Boolean = false\n    $notesInput: NotesInput = {\n      pagination: {\n        first: 12 \n        sort: {\n          by: votes\n        }\n      }\n      fill: false\n    }\n  ) {\n    fragrance(id: $fragranceId) {\n      id\n      notes {\n        top(input: $notesInput) @include(if: $includeTop) {\n          edges {\n            node {\n              id\n              noteId\n              name\n              icon\n              layer\n              votes\n              myVote\n            }\n          }\n          pageInfo {\n            hasPreviousPage\n            hasNextPage\n            startCursor\n            endCursor\n          }\n        }\n        middle(input: $notesInput) @include(if: $includeMiddle) {\n          edges {\n            node {\n              id\n              noteId\n              name\n              icon\n              layer\n              votes\n              myVote\n            }\n          }\n          pageInfo {\n            hasPreviousPage\n            hasNextPage\n            startCursor\n            endCursor\n          }\n        }\n        base(input: $notesInput) @include(if: $includeBase) {\n          edges {\n            node {\n              id\n              noteId\n              name\n              icon\n              layer\n              votes\n              myVote\n            }\n          }\n          pageInfo {\n            hasPreviousPage\n            hasNextPage\n            startCursor\n            endCursor\n          }\n        }\n      }\n    }\n  }\n": types.FragranceNotesDocument,
    "\n  query FragranceNotesLayer(\n    $fragranceId: Int!\n    $includeTop: Boolean = false\n    $includeMiddle: Boolean = false\n    $includeBase: Boolean = false\n    $notesInput: NotesInput = {\n      pagination: {\n        first: 30\n        sort: {\n          by: votes\n        }\n      }\n      fill: false\n    }\n  ) {\n    fragrance(id: $fragranceId) {\n      id\n      notes {\n        top(input: $notesInput) @include(if: $includeTop) {\n          edges {\n            node {\n              id\n              noteId\n              name\n              icon\n              layer\n              votes\n              myVote\n            }\n          }\n          pageInfo {\n            hasPreviousPage\n            hasNextPage\n            startCursor\n            endCursor\n          }\n        }\n        middle(input: $notesInput) @include(if: $includeMiddle) {\n          edges {\n            node {\n              id\n              noteId\n              name\n              icon\n              layer\n              votes\n              myVote\n            }\n          }\n          pageInfo {\n            hasPreviousPage\n            hasNextPage\n            startCursor\n            endCursor\n          }\n        }\n        base(input: $notesInput) @include(if: $includeBase) {\n          edges {\n            node {\n              id\n              noteId\n              name\n              icon\n              layer\n              votes\n              myVote\n            }\n          }\n          pageInfo {\n            hasPreviousPage\n            hasNextPage\n            startCursor\n            endCursor\n          }\n        }\n      }\n    }\n  }\n": types.FragranceNotesLayerDocument,
    "\n  query FragranceReviews(\n    $fragranceId: Int!\n    $reviewsInput: QueryInput = {\n      pagination: {\n        first: 20\n        sort: {\n          by: votes\n        }\n      }\n    }\n  ) {\n    fragrance(id: $fragranceId) {\n      id\n      brand\n      name\n      rating\n      reviewsCount\n      reviews(input: $reviewsInput) {\n        edges {\n          node {\n            id\n            rating\n            review\n            votes\n            dCreated\n            dModified\n            dDeleted\n            author \n            myVote\n          }\n        }\n        pageInfo {\n          hasPreviousPage\n          hasNextPage\n          startCursor\n          endCursor\n        }\n      }\n      reviewDistribution {\n        one\n        two\n        three\n        four\n        five\n      }\n    }\n  }\n": types.FragranceReviewsDocument,
    "\n  query FragranceTraits($fragranceId: Int!) {\n    fragrance(id: $fragranceId) {\n      id\n      traits {\n        gender {\n          id\n          trait\n          value\n          myVote\n        }\n        longevity {\n          id\n          trait\n          value\n          myVote\n        }\n        sillage {\n          id\n          trait\n          value\n          myVote\n        }\n        complexity {\n          id\n          trait\n          value\n          myVote\n        }\n        balance {\n          id\n          trait\n          value\n          myVote\n        }\n        allure {\n          id\n          trait\n          value\n          myVote\n        }\n      }\n    }\n  }\n": types.FragranceTraitsDocument,
    "\n  query MyReview($fragranceId: Int!) {\n    fragrance(id: $fragranceId) {\n      id\n      myReview {\n        id\n        rating\n        review\n        votes\n        dCreated\n        dModified\n        dDeleted\n        author \n        myVote\n      }\n    }\n  }\n": types.MyReviewDocument,
    "\n  mutation ReviewFragrance($fragranceId: Int!, $myRating: Int!, $myReview: String!) {\n    reviewFragrance(fragranceId: $fragranceId, myRating: $myRating, myReview: $myReview) {\n      id\n      rating\n      review\n      votes\n      myVote\n      dCreated\n      dModified\n      author \n    }\n  }\n": types.ReviewFragranceDocument,
    "\n  query SuggestedFragrances(\n    $input: QueryInput = { \n      pagination: { \n        first: 20\n      }\n    }\n    $imagesInput: QueryInput = { \n      pagination: { \n        first: 1\n      }\n    }\n  ) {\n    fragrances(input: $input) {\n      edges {\n        node {\n          id\n          brand\n          name\n          votes {\n            id\n            dislikes\n            likes\n            myVote\n          }\n          images(input: $imagesInput) {\n            edges {\n              node {\n                id\n                url\n              }\n            }\n          }\n        }\n        cursor\n      }\n      pageInfo {\n        hasPreviousPage\n        hasNextPage\n        startCursor\n        endCursor\n      }\n    }\n  } \n": types.SuggestedFragrancesDocument,
    "\n  mutation UpsertUser($email: String!, $cognitoId: String!) {\n    upsertUser(email: $email, cognitoId: $cognitoId) {\n      id\n      email\n      username\n      cognitoId\n      followers\n      following\n    }\n  }\n": types.UpsertUserDocument,
    "\n  query UserCollections(\n    $userId: Int!\n    $collectionsInput: QueryInput = {\n      pagination: {\n        first: 20\n      }\n    }\n    $collectionItemsInput: QueryInput = {\n      pagination: {\n        first: 4\n        sort: {\n          by: added\n          direction: asc\n        }\n      }\n    }\n    $imagesInput: QueryInput = {\n      pagination: {\n        first: 1\n      }\n    }\n  ) {\n    user(id: $userId) {\n      id\n      collections(input: $collectionsInput) {\n        pageInfo {\n          hasPreviousPage\n          hasNextPage\n          startCursor\n          endCursor\n        }\n        edges {\n          node {\n            id\n            name\n            items(input: $collectionItemsInput) {\n              edges {\n                node {\n                  id\n                  fragrance {\n                    id\n                    images(input: $imagesInput) {\n                      edges {\n                        node {\n                          id\n                          url\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n            user {\n              id\n              username\n            }\n          }\n        }\n      }\n    }\n  }\n": types.UserCollectionsDocument,
    "\n  query UserInfo(\n    $userId: Int!\n  ) {\n    user(id: $userId) {\n      id\n      username\n      followers\n      following\n    }\n  }\n": types.UserInfoDocument,
    "\n  query UserLikes(\n    $userId: Int!\n    $likesInput: QueryInput = {\n      pagination: {\n        first: 20\n      }\n    }\n    $imagesInput: QueryInput = {\n      pagination: {\n        first: 1\n      }\n    }\n  ) {\n    user(id: $userId) {\n      id\n      likes(input: $likesInput) {\n        pageInfo {\n          hasPreviousPage\n          hasNextPage\n          startCursor\n          endCursor\n        }\n        edges {\n          node {\n            id\n            brand\n            name\n            images(input: $imagesInput) {\n              edges {\n                node {\n                  id\n                  url\n                }\n              }\n            }\n            votes {\n              id\n              likes\n              dislikes\n              myVote\n            }\n          }\n        }\n      }\n    }\n  }\n": types.UserLikesDocument,
    "\n  query UserReviews(\n    $userId: Int!\n    $reviewsInput: QueryInput = {\n      pagination: {\n        first: 20 \n      }\n    }\n  ) {\n    user(id: $userId) {\n      id\n      reviews(input: $reviewsInput) {\n        pageInfo {\n          hasPreviousPage\n          hasNextPage\n          startCursor\n          endCursor\n        }\n        edges {\n          node {\n            id\n            author\n            rating\n            review\n            votes\n            dCreated\n            dModified\n          }\n        }\n      }\n    }\n  }\n": types.UserReviewsDocument,
    "\n  mutation VoteOnAccord($fragranceId: Int!, $accordId: Int!, $myVote: Boolean!) {\n    voteOnAccord(fragranceId: $fragranceId, accordId: $accordId, myVote: $myVote) {\n      id\n      votes\n      myVote\n    }\n  }\n": types.VoteOnAccordDocument,
    "\n  mutation VoteOnFragance($fragranceId: Int!, $myVote: Boolean) {\n    voteOnFragrance(fragranceId: $fragranceId, myVote: $myVote) {\n      id\n      likes\n      dislikes\n      myVote\n    } \n  }\n": types.VoteOnFraganceDocument,
    "\n  mutation VoteOnNote($fragranceId: Int!, $noteId: Int!, $layer: NoteLayer!, $myVote: Boolean!) {\n    voteOnNote(fragranceId: $fragranceId, noteId: $noteId, layer: $layer, myVote: $myVote) {\n      id\n      noteId\n      layer\n      votes\n      myVote\n    }\n  }\n": types.VoteOnNoteDocument,
    "\n  mutation VoteOnReview($reviewId: Int!, $myVote: Boolean) {\n    voteOnReview(reviewId: $reviewId, myVote: $myVote) {\n      id\n      votes\n      myVote\n    }\n  }\n": types.VoteOnReviewDocument,
    "\n  mutation VoteOnTrait($fragranceId: Int!, $trait: FragranceTraitType!, $myVote: Float!) {\n    voteOnTrait(fragranceId: $fragranceId, trait: $trait, myVote: $myVote) {\n      id\n      trait\n      value\n      myVote\n    }\n  }\n": types.VoteOnTraitDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Fragrance(\n    $fragranceId: Int!\n    $imagesInput: QueryInput = {\n      pagination: {\n        first: 5 \n      }\n    }\n    $accordsInput: AccordsInput = {\n      pagination: {\n        first: 8,\n        sort: {\n          by: votes\n        }\n      }\n    }\n    $notesInput: NotesInput = {\n      pagination: {\n        first: 8,\n        sort: {\n          by: votes\n        }\n      }\n    }\n    $reviewsInput: QueryInput = {\n      pagination: {\n        first: 10,\n        sort: {\n          by: votes\n        }\n      }\n    }\n  ) {\n    fragrance(id: $fragranceId) {\n      id\n      brand\n      name\n      rating\n      reviewsCount\n\n      votes {\n        id\n        likes\n        dislikes\n        myVote\n      }\n\n      images(input: $imagesInput) {\n        edges {\n          node {\n            id\n            url\n          }\n        }\n      }\n\n      traits {\n        gender {\n          id\n          value\n          trait\n          myVote\n        }\n        longevity {\n          id\n          value\n          trait\n          myVote\n        }\n        sillage {\n          id\n          value\n          trait\n          myVote\n        }\n        complexity {\n          id\n          value\n          trait\n          myVote\n        }\n        balance {\n          id\n          value\n          trait\n          myVote\n        }\n        allure {\n          id\n          value\n          trait\n          myVote\n        }\n      }\n\n      accords(input: $accordsInput) {\n        edges {\n          node {\n            id\n            accordId\n            name\n            color\n            votes\n            myVote\n          }\n        }\n      }\n\n      notes {\n        fragranceId\n        top(input: $notesInput) {\n          edges {\n            node {\n              id\n              noteId\n              name\n              icon\n              votes\n              layer\n              myVote\n            }\n          }\n        }\n        middle(input: $notesInput) {\n          edges {\n            node {\n              id\n              noteId\n              name\n              icon\n              votes\n              layer\n              myVote\n            }\n          }\n        }\n        base(input: $notesInput) {\n          edges {\n            node {\n              id\n              noteId\n              name\n              icon\n              votes\n              layer\n              myVote\n            }\n          }\n        }\n      }\n      reviews(input: $reviewsInput) {\n        edges {\n          node {\n            id\n            author\n            rating\n            review\n            votes\n            myVote\n            dCreated\n            dModified\n            dDeleted\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query Fragrance(\n    $fragranceId: Int!\n    $imagesInput: QueryInput = {\n      pagination: {\n        first: 5 \n      }\n    }\n    $accordsInput: AccordsInput = {\n      pagination: {\n        first: 8,\n        sort: {\n          by: votes\n        }\n      }\n    }\n    $notesInput: NotesInput = {\n      pagination: {\n        first: 8,\n        sort: {\n          by: votes\n        }\n      }\n    }\n    $reviewsInput: QueryInput = {\n      pagination: {\n        first: 10,\n        sort: {\n          by: votes\n        }\n      }\n    }\n  ) {\n    fragrance(id: $fragranceId) {\n      id\n      brand\n      name\n      rating\n      reviewsCount\n\n      votes {\n        id\n        likes\n        dislikes\n        myVote\n      }\n\n      images(input: $imagesInput) {\n        edges {\n          node {\n            id\n            url\n          }\n        }\n      }\n\n      traits {\n        gender {\n          id\n          value\n          trait\n          myVote\n        }\n        longevity {\n          id\n          value\n          trait\n          myVote\n        }\n        sillage {\n          id\n          value\n          trait\n          myVote\n        }\n        complexity {\n          id\n          value\n          trait\n          myVote\n        }\n        balance {\n          id\n          value\n          trait\n          myVote\n        }\n        allure {\n          id\n          value\n          trait\n          myVote\n        }\n      }\n\n      accords(input: $accordsInput) {\n        edges {\n          node {\n            id\n            accordId\n            name\n            color\n            votes\n            myVote\n          }\n        }\n      }\n\n      notes {\n        fragranceId\n        top(input: $notesInput) {\n          edges {\n            node {\n              id\n              noteId\n              name\n              icon\n              votes\n              layer\n              myVote\n            }\n          }\n        }\n        middle(input: $notesInput) {\n          edges {\n            node {\n              id\n              noteId\n              name\n              icon\n              votes\n              layer\n              myVote\n            }\n          }\n        }\n        base(input: $notesInput) {\n          edges {\n            node {\n              id\n              noteId\n              name\n              icon\n              votes\n              layer\n              myVote\n            }\n          }\n        }\n      }\n      reviews(input: $reviewsInput) {\n        edges {\n          node {\n            id\n            author\n            rating\n            review\n            votes\n            myVote\n            dCreated\n            dModified\n            dDeleted\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query FragranceAccords(\n    $fragranceId: Int!\n    $accordsInput: AccordsInput = {\n      pagination: {\n        first: 30 \n        sort: {\n          by: votes\n        }\n      }\n      fill: true\n    }\n  ) {\n    fragrance(id: $fragranceId) {\n      id\n      accords(input: $accordsInput) {\n        edges {\n          node {\n            id\n            accordId\n            name\n            color\n            votes\n            myVote\n          }\n        }\n        pageInfo {\n          hasNextPage\n          hasPreviousPage\n          startCursor\n          endCursor\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query FragranceAccords(\n    $fragranceId: Int!\n    $accordsInput: AccordsInput = {\n      pagination: {\n        first: 30 \n        sort: {\n          by: votes\n        }\n      }\n      fill: true\n    }\n  ) {\n    fragrance(id: $fragranceId) {\n      id\n      accords(input: $accordsInput) {\n        edges {\n          node {\n            id\n            accordId\n            name\n            color\n            votes\n            myVote\n          }\n        }\n        pageInfo {\n          hasNextPage\n          hasPreviousPage\n          startCursor\n          endCursor\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query FragranceNotes(\n    $fragranceId: Int!\n    $includeTop: Boolean = false\n    $includeMiddle: Boolean = false\n    $includeBase: Boolean = false\n    $notesInput: NotesInput = {\n      pagination: {\n        first: 12 \n        sort: {\n          by: votes\n        }\n      }\n      fill: false\n    }\n  ) {\n    fragrance(id: $fragranceId) {\n      id\n      notes {\n        top(input: $notesInput) @include(if: $includeTop) {\n          edges {\n            node {\n              id\n              noteId\n              name\n              icon\n              layer\n              votes\n              myVote\n            }\n          }\n          pageInfo {\n            hasPreviousPage\n            hasNextPage\n            startCursor\n            endCursor\n          }\n        }\n        middle(input: $notesInput) @include(if: $includeMiddle) {\n          edges {\n            node {\n              id\n              noteId\n              name\n              icon\n              layer\n              votes\n              myVote\n            }\n          }\n          pageInfo {\n            hasPreviousPage\n            hasNextPage\n            startCursor\n            endCursor\n          }\n        }\n        base(input: $notesInput) @include(if: $includeBase) {\n          edges {\n            node {\n              id\n              noteId\n              name\n              icon\n              layer\n              votes\n              myVote\n            }\n          }\n          pageInfo {\n            hasPreviousPage\n            hasNextPage\n            startCursor\n            endCursor\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query FragranceNotes(\n    $fragranceId: Int!\n    $includeTop: Boolean = false\n    $includeMiddle: Boolean = false\n    $includeBase: Boolean = false\n    $notesInput: NotesInput = {\n      pagination: {\n        first: 12 \n        sort: {\n          by: votes\n        }\n      }\n      fill: false\n    }\n  ) {\n    fragrance(id: $fragranceId) {\n      id\n      notes {\n        top(input: $notesInput) @include(if: $includeTop) {\n          edges {\n            node {\n              id\n              noteId\n              name\n              icon\n              layer\n              votes\n              myVote\n            }\n          }\n          pageInfo {\n            hasPreviousPage\n            hasNextPage\n            startCursor\n            endCursor\n          }\n        }\n        middle(input: $notesInput) @include(if: $includeMiddle) {\n          edges {\n            node {\n              id\n              noteId\n              name\n              icon\n              layer\n              votes\n              myVote\n            }\n          }\n          pageInfo {\n            hasPreviousPage\n            hasNextPage\n            startCursor\n            endCursor\n          }\n        }\n        base(input: $notesInput) @include(if: $includeBase) {\n          edges {\n            node {\n              id\n              noteId\n              name\n              icon\n              layer\n              votes\n              myVote\n            }\n          }\n          pageInfo {\n            hasPreviousPage\n            hasNextPage\n            startCursor\n            endCursor\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query FragranceNotesLayer(\n    $fragranceId: Int!\n    $includeTop: Boolean = false\n    $includeMiddle: Boolean = false\n    $includeBase: Boolean = false\n    $notesInput: NotesInput = {\n      pagination: {\n        first: 30\n        sort: {\n          by: votes\n        }\n      }\n      fill: false\n    }\n  ) {\n    fragrance(id: $fragranceId) {\n      id\n      notes {\n        top(input: $notesInput) @include(if: $includeTop) {\n          edges {\n            node {\n              id\n              noteId\n              name\n              icon\n              layer\n              votes\n              myVote\n            }\n          }\n          pageInfo {\n            hasPreviousPage\n            hasNextPage\n            startCursor\n            endCursor\n          }\n        }\n        middle(input: $notesInput) @include(if: $includeMiddle) {\n          edges {\n            node {\n              id\n              noteId\n              name\n              icon\n              layer\n              votes\n              myVote\n            }\n          }\n          pageInfo {\n            hasPreviousPage\n            hasNextPage\n            startCursor\n            endCursor\n          }\n        }\n        base(input: $notesInput) @include(if: $includeBase) {\n          edges {\n            node {\n              id\n              noteId\n              name\n              icon\n              layer\n              votes\n              myVote\n            }\n          }\n          pageInfo {\n            hasPreviousPage\n            hasNextPage\n            startCursor\n            endCursor\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query FragranceNotesLayer(\n    $fragranceId: Int!\n    $includeTop: Boolean = false\n    $includeMiddle: Boolean = false\n    $includeBase: Boolean = false\n    $notesInput: NotesInput = {\n      pagination: {\n        first: 30\n        sort: {\n          by: votes\n        }\n      }\n      fill: false\n    }\n  ) {\n    fragrance(id: $fragranceId) {\n      id\n      notes {\n        top(input: $notesInput) @include(if: $includeTop) {\n          edges {\n            node {\n              id\n              noteId\n              name\n              icon\n              layer\n              votes\n              myVote\n            }\n          }\n          pageInfo {\n            hasPreviousPage\n            hasNextPage\n            startCursor\n            endCursor\n          }\n        }\n        middle(input: $notesInput) @include(if: $includeMiddle) {\n          edges {\n            node {\n              id\n              noteId\n              name\n              icon\n              layer\n              votes\n              myVote\n            }\n          }\n          pageInfo {\n            hasPreviousPage\n            hasNextPage\n            startCursor\n            endCursor\n          }\n        }\n        base(input: $notesInput) @include(if: $includeBase) {\n          edges {\n            node {\n              id\n              noteId\n              name\n              icon\n              layer\n              votes\n              myVote\n            }\n          }\n          pageInfo {\n            hasPreviousPage\n            hasNextPage\n            startCursor\n            endCursor\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query FragranceReviews(\n    $fragranceId: Int!\n    $reviewsInput: QueryInput = {\n      pagination: {\n        first: 20\n        sort: {\n          by: votes\n        }\n      }\n    }\n  ) {\n    fragrance(id: $fragranceId) {\n      id\n      brand\n      name\n      rating\n      reviewsCount\n      reviews(input: $reviewsInput) {\n        edges {\n          node {\n            id\n            rating\n            review\n            votes\n            dCreated\n            dModified\n            dDeleted\n            author \n            myVote\n          }\n        }\n        pageInfo {\n          hasPreviousPage\n          hasNextPage\n          startCursor\n          endCursor\n        }\n      }\n      reviewDistribution {\n        one\n        two\n        three\n        four\n        five\n      }\n    }\n  }\n"): (typeof documents)["\n  query FragranceReviews(\n    $fragranceId: Int!\n    $reviewsInput: QueryInput = {\n      pagination: {\n        first: 20\n        sort: {\n          by: votes\n        }\n      }\n    }\n  ) {\n    fragrance(id: $fragranceId) {\n      id\n      brand\n      name\n      rating\n      reviewsCount\n      reviews(input: $reviewsInput) {\n        edges {\n          node {\n            id\n            rating\n            review\n            votes\n            dCreated\n            dModified\n            dDeleted\n            author \n            myVote\n          }\n        }\n        pageInfo {\n          hasPreviousPage\n          hasNextPage\n          startCursor\n          endCursor\n        }\n      }\n      reviewDistribution {\n        one\n        two\n        three\n        four\n        five\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query FragranceTraits($fragranceId: Int!) {\n    fragrance(id: $fragranceId) {\n      id\n      traits {\n        gender {\n          id\n          trait\n          value\n          myVote\n        }\n        longevity {\n          id\n          trait\n          value\n          myVote\n        }\n        sillage {\n          id\n          trait\n          value\n          myVote\n        }\n        complexity {\n          id\n          trait\n          value\n          myVote\n        }\n        balance {\n          id\n          trait\n          value\n          myVote\n        }\n        allure {\n          id\n          trait\n          value\n          myVote\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query FragranceTraits($fragranceId: Int!) {\n    fragrance(id: $fragranceId) {\n      id\n      traits {\n        gender {\n          id\n          trait\n          value\n          myVote\n        }\n        longevity {\n          id\n          trait\n          value\n          myVote\n        }\n        sillage {\n          id\n          trait\n          value\n          myVote\n        }\n        complexity {\n          id\n          trait\n          value\n          myVote\n        }\n        balance {\n          id\n          trait\n          value\n          myVote\n        }\n        allure {\n          id\n          trait\n          value\n          myVote\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query MyReview($fragranceId: Int!) {\n    fragrance(id: $fragranceId) {\n      id\n      myReview {\n        id\n        rating\n        review\n        votes\n        dCreated\n        dModified\n        dDeleted\n        author \n        myVote\n      }\n    }\n  }\n"): (typeof documents)["\n  query MyReview($fragranceId: Int!) {\n    fragrance(id: $fragranceId) {\n      id\n      myReview {\n        id\n        rating\n        review\n        votes\n        dCreated\n        dModified\n        dDeleted\n        author \n        myVote\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation ReviewFragrance($fragranceId: Int!, $myRating: Int!, $myReview: String!) {\n    reviewFragrance(fragranceId: $fragranceId, myRating: $myRating, myReview: $myReview) {\n      id\n      rating\n      review\n      votes\n      myVote\n      dCreated\n      dModified\n      author \n    }\n  }\n"): (typeof documents)["\n  mutation ReviewFragrance($fragranceId: Int!, $myRating: Int!, $myReview: String!) {\n    reviewFragrance(fragranceId: $fragranceId, myRating: $myRating, myReview: $myReview) {\n      id\n      rating\n      review\n      votes\n      myVote\n      dCreated\n      dModified\n      author \n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query SuggestedFragrances(\n    $input: QueryInput = { \n      pagination: { \n        first: 20\n      }\n    }\n    $imagesInput: QueryInput = { \n      pagination: { \n        first: 1\n      }\n    }\n  ) {\n    fragrances(input: $input) {\n      edges {\n        node {\n          id\n          brand\n          name\n          votes {\n            id\n            dislikes\n            likes\n            myVote\n          }\n          images(input: $imagesInput) {\n            edges {\n              node {\n                id\n                url\n              }\n            }\n          }\n        }\n        cursor\n      }\n      pageInfo {\n        hasPreviousPage\n        hasNextPage\n        startCursor\n        endCursor\n      }\n    }\n  } \n"): (typeof documents)["\n  query SuggestedFragrances(\n    $input: QueryInput = { \n      pagination: { \n        first: 20\n      }\n    }\n    $imagesInput: QueryInput = { \n      pagination: { \n        first: 1\n      }\n    }\n  ) {\n    fragrances(input: $input) {\n      edges {\n        node {\n          id\n          brand\n          name\n          votes {\n            id\n            dislikes\n            likes\n            myVote\n          }\n          images(input: $imagesInput) {\n            edges {\n              node {\n                id\n                url\n              }\n            }\n          }\n        }\n        cursor\n      }\n      pageInfo {\n        hasPreviousPage\n        hasNextPage\n        startCursor\n        endCursor\n      }\n    }\n  } \n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpsertUser($email: String!, $cognitoId: String!) {\n    upsertUser(email: $email, cognitoId: $cognitoId) {\n      id\n      email\n      username\n      cognitoId\n      followers\n      following\n    }\n  }\n"): (typeof documents)["\n  mutation UpsertUser($email: String!, $cognitoId: String!) {\n    upsertUser(email: $email, cognitoId: $cognitoId) {\n      id\n      email\n      username\n      cognitoId\n      followers\n      following\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query UserCollections(\n    $userId: Int!\n    $collectionsInput: QueryInput = {\n      pagination: {\n        first: 20\n      }\n    }\n    $collectionItemsInput: QueryInput = {\n      pagination: {\n        first: 4\n        sort: {\n          by: added\n          direction: asc\n        }\n      }\n    }\n    $imagesInput: QueryInput = {\n      pagination: {\n        first: 1\n      }\n    }\n  ) {\n    user(id: $userId) {\n      id\n      collections(input: $collectionsInput) {\n        pageInfo {\n          hasPreviousPage\n          hasNextPage\n          startCursor\n          endCursor\n        }\n        edges {\n          node {\n            id\n            name\n            items(input: $collectionItemsInput) {\n              edges {\n                node {\n                  id\n                  fragrance {\n                    id\n                    images(input: $imagesInput) {\n                      edges {\n                        node {\n                          id\n                          url\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n            user {\n              id\n              username\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query UserCollections(\n    $userId: Int!\n    $collectionsInput: QueryInput = {\n      pagination: {\n        first: 20\n      }\n    }\n    $collectionItemsInput: QueryInput = {\n      pagination: {\n        first: 4\n        sort: {\n          by: added\n          direction: asc\n        }\n      }\n    }\n    $imagesInput: QueryInput = {\n      pagination: {\n        first: 1\n      }\n    }\n  ) {\n    user(id: $userId) {\n      id\n      collections(input: $collectionsInput) {\n        pageInfo {\n          hasPreviousPage\n          hasNextPage\n          startCursor\n          endCursor\n        }\n        edges {\n          node {\n            id\n            name\n            items(input: $collectionItemsInput) {\n              edges {\n                node {\n                  id\n                  fragrance {\n                    id\n                    images(input: $imagesInput) {\n                      edges {\n                        node {\n                          id\n                          url\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n            user {\n              id\n              username\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query UserInfo(\n    $userId: Int!\n  ) {\n    user(id: $userId) {\n      id\n      username\n      followers\n      following\n    }\n  }\n"): (typeof documents)["\n  query UserInfo(\n    $userId: Int!\n  ) {\n    user(id: $userId) {\n      id\n      username\n      followers\n      following\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query UserLikes(\n    $userId: Int!\n    $likesInput: QueryInput = {\n      pagination: {\n        first: 20\n      }\n    }\n    $imagesInput: QueryInput = {\n      pagination: {\n        first: 1\n      }\n    }\n  ) {\n    user(id: $userId) {\n      id\n      likes(input: $likesInput) {\n        pageInfo {\n          hasPreviousPage\n          hasNextPage\n          startCursor\n          endCursor\n        }\n        edges {\n          node {\n            id\n            brand\n            name\n            images(input: $imagesInput) {\n              edges {\n                node {\n                  id\n                  url\n                }\n              }\n            }\n            votes {\n              id\n              likes\n              dislikes\n              myVote\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query UserLikes(\n    $userId: Int!\n    $likesInput: QueryInput = {\n      pagination: {\n        first: 20\n      }\n    }\n    $imagesInput: QueryInput = {\n      pagination: {\n        first: 1\n      }\n    }\n  ) {\n    user(id: $userId) {\n      id\n      likes(input: $likesInput) {\n        pageInfo {\n          hasPreviousPage\n          hasNextPage\n          startCursor\n          endCursor\n        }\n        edges {\n          node {\n            id\n            brand\n            name\n            images(input: $imagesInput) {\n              edges {\n                node {\n                  id\n                  url\n                }\n              }\n            }\n            votes {\n              id\n              likes\n              dislikes\n              myVote\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query UserReviews(\n    $userId: Int!\n    $reviewsInput: QueryInput = {\n      pagination: {\n        first: 20 \n      }\n    }\n  ) {\n    user(id: $userId) {\n      id\n      reviews(input: $reviewsInput) {\n        pageInfo {\n          hasPreviousPage\n          hasNextPage\n          startCursor\n          endCursor\n        }\n        edges {\n          node {\n            id\n            author\n            rating\n            review\n            votes\n            dCreated\n            dModified\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query UserReviews(\n    $userId: Int!\n    $reviewsInput: QueryInput = {\n      pagination: {\n        first: 20 \n      }\n    }\n  ) {\n    user(id: $userId) {\n      id\n      reviews(input: $reviewsInput) {\n        pageInfo {\n          hasPreviousPage\n          hasNextPage\n          startCursor\n          endCursor\n        }\n        edges {\n          node {\n            id\n            author\n            rating\n            review\n            votes\n            dCreated\n            dModified\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation VoteOnAccord($fragranceId: Int!, $accordId: Int!, $myVote: Boolean!) {\n    voteOnAccord(fragranceId: $fragranceId, accordId: $accordId, myVote: $myVote) {\n      id\n      votes\n      myVote\n    }\n  }\n"): (typeof documents)["\n  mutation VoteOnAccord($fragranceId: Int!, $accordId: Int!, $myVote: Boolean!) {\n    voteOnAccord(fragranceId: $fragranceId, accordId: $accordId, myVote: $myVote) {\n      id\n      votes\n      myVote\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation VoteOnFragance($fragranceId: Int!, $myVote: Boolean) {\n    voteOnFragrance(fragranceId: $fragranceId, myVote: $myVote) {\n      id\n      likes\n      dislikes\n      myVote\n    } \n  }\n"): (typeof documents)["\n  mutation VoteOnFragance($fragranceId: Int!, $myVote: Boolean) {\n    voteOnFragrance(fragranceId: $fragranceId, myVote: $myVote) {\n      id\n      likes\n      dislikes\n      myVote\n    } \n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation VoteOnNote($fragranceId: Int!, $noteId: Int!, $layer: NoteLayer!, $myVote: Boolean!) {\n    voteOnNote(fragranceId: $fragranceId, noteId: $noteId, layer: $layer, myVote: $myVote) {\n      id\n      noteId\n      layer\n      votes\n      myVote\n    }\n  }\n"): (typeof documents)["\n  mutation VoteOnNote($fragranceId: Int!, $noteId: Int!, $layer: NoteLayer!, $myVote: Boolean!) {\n    voteOnNote(fragranceId: $fragranceId, noteId: $noteId, layer: $layer, myVote: $myVote) {\n      id\n      noteId\n      layer\n      votes\n      myVote\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation VoteOnReview($reviewId: Int!, $myVote: Boolean) {\n    voteOnReview(reviewId: $reviewId, myVote: $myVote) {\n      id\n      votes\n      myVote\n    }\n  }\n"): (typeof documents)["\n  mutation VoteOnReview($reviewId: Int!, $myVote: Boolean) {\n    voteOnReview(reviewId: $reviewId, myVote: $myVote) {\n      id\n      votes\n      myVote\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation VoteOnTrait($fragranceId: Int!, $trait: FragranceTraitType!, $myVote: Float!) {\n    voteOnTrait(fragranceId: $fragranceId, trait: $trait, myVote: $myVote) {\n      id\n      trait\n      value\n      myVote\n    }\n  }\n"): (typeof documents)["\n  mutation VoteOnTrait($fragranceId: Int!, $trait: FragranceTraitType!, $myVote: Float!) {\n    voteOnTrait(fragranceId: $fragranceId, trait: $trait, myVote: $myVote) {\n      id\n      trait\n      value\n      myVote\n    }\n  }\n"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;