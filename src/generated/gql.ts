/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
    "\n  query Fragrance(\n    $id: Int!, \n    $imagesLimit: Int = 5, \n    $imagesOffset: Int = 0,\n    $notesLimit: Int = 8,\n    $notesOffset: Int = 0,\n    $notesFill: Boolean = false,\n    $accordsLimit: Int = 8,\n    $accordsOffset: Int = 0,\n    $accordsFill: Boolean = false,\n    $reviewsLimit: Int = 10,\n    $reviewsOffset: Int = 0) {\n    fragrance(id: $id) {\n      id\n      brand\n      name\n      rating\n      reviewsCount\n\n      vote {\n        id\n        likes\n        dislikes\n        myVote\n      }\n\n      images(limit: $imagesLimit, offset: $imagesOffset) {\n        id\n        url\n      }\n\n      traits {\n        gender {\n          id\n          trait\n          value\n          myVote\n        }\n        longevity {\n          id\n          trait\n          value\n          myVote\n        }\n        sillage {\n          id\n          trait\n          value\n          myVote\n        }\n        complexity {\n          id\n          trait\n          value\n          myVote\n        }\n        balance {\n          id\n          trait\n          value\n          myVote\n        }\n        allure {\n          id\n          trait\n          value\n          myVote\n        }\n      }\n\n      notes {\n        top(limit: $notesLimit, offset: $notesOffset, fill: $notesFill) {\n          id\n          noteId\n          layer\n          name\n          votes\n          myVote\n        }\n        middle(limit: $notesLimit, offset: $notesOffset, fill: $notesFill) {\n          id\n          noteId\n          layer\n          name\n          votes\n          myVote\n        }\n        base(limit: $notesLimit, offset: $notesOffset, fill: $notesFill) {\n          id\n          noteId\n          layer\n          name\n          votes\n          myVote\n        }\n      }\n\n      accords(limit: $accordsLimit, offset: $accordsOffset, fill: $accordsFill) {\n        id\n        accordId\n        name\n        color\n        votes\n        myVote\n      }\n\n      reviews(limit: $reviewsLimit, offset: $reviewsOffset) {\n        id\n        rating\n        review\n        votes\n        dCreated\n        dModified\n        dDeleted\n        author \n        myVote\n      }\n    }\n  }\n": typeof types.FragranceDocument,
    "\n  query FragranceAccords(\n    $id: Int!, \n    $limit: Int = 30, \n    $offset: Int = 0, \n    $fill: Boolean = false) {\n    fragrance(id: $id) {\n      id\n\n      accords(limit: $limit, offset: $offset, fill: $fill) {\n        id\n        accordId\n        name\n        color\n        votes\n        myVote\n      }\n    }\n  }\n": typeof types.FragranceAccordsDocument,
    "\n  query FragranceNotes(\n    $id: Int!, \n    $limit: Int = 12, \n    $offset: Int = 0, \n    $fill: Boolean = false,\n    $includeTop: Boolean!,\n    $includeMiddle: Boolean!,\n    $includeBase: Boolean!\n  ) {\n    fragrance(id: $id) {\n      id\n\n      notes {\n        top(limit: $limit, offset: $offset, fill: $fill) @include(if: $includeTop) {\n          id\n          noteId\n          name\n          layer\n          votes\n          myVote\n        }\n        middle(limit: $limit, offset: $offset, fill: $fill) @include(if: $includeMiddle) {\n          id\n          noteId\n          name\n          layer\n          votes\n          myVote\n        }\n        base(limit: $limit, offset: $offset, fill: $fill) @include(if: $includeBase) {\n          id\n          noteId\n          name\n          layer\n          votes\n          myVote\n        }\n      } \n    }\n  }\n": typeof types.FragranceNotesDocument,
    "\n  query FragranceReviews($fragranceId: Int!, $limit: Int = 10, $offset: Int = 0) {\n    fragrance(id: $fragranceId) {\n      id\n      brand\n      name\n      rating\n      reviewsCount\n      reviews(limit: $limit, offset: $offset) {\n        id\n        rating\n        review\n        votes\n        dCreated\n        dModified\n        dDeleted\n        author \n        myVote\n      }\n      reviewDistribution {\n        one\n        two\n        three\n        four\n        five\n      }\n    }\n  }\n": typeof types.FragranceReviewsDocument,
    "\n  query FragranceTraits($id: Int!) {\n    fragrance(id: $id) {\n      id\n      traits {\n        gender {\n          id\n          trait\n          value\n          myVote\n        }\n        longevity {\n          id\n          trait\n          value\n          myVote\n        }\n        sillage {\n          id\n          trait\n          value\n          myVote\n        }\n        complexity {\n          id\n          trait\n          value\n          myVote\n        }\n        balance {\n          id\n          trait\n          value\n          myVote\n        }\n        allure {\n          id\n          trait\n          value\n          myVote\n        }\n      }\n    }\n  }\n": typeof types.FragranceTraitsDocument,
    "\n  query MyReview($fragranceId: Int!) {\n    fragrance(id: $fragranceId) {\n      id\n      myReview {\n        id\n        rating\n        review\n        votes\n        dCreated\n        dModified\n        dDeleted\n        author \n        myVote\n      }\n    }\n  }\n": typeof types.MyReviewDocument,
    "\n  mutation ReviewFragrance($fragranceId: Int!, $myRating: Int!, $myReview: String!) {\n    reviewFragrance(fragranceId: $fragranceId, myRating: $myRating, myReview: $myReview) {\n      id\n      rating\n      review\n      votes\n      myVote\n      dCreated\n      dModified\n      author \n    }\n  }\n": typeof types.ReviewFragranceDocument,
    "\n  query SuggestedFragrances(\n    $limit: Int = 10, \n    $offset: Int = 0, \n    $imagesLimit: Int = 1,\n    $imagesOffset: Int = 0) {\n    fragrances(limit: $limit, offset: $offset) {\n      id\n      brand\n      name\n\n      vote {\n        id\n        likes\n        dislikes\n        myVote\n      } \n\n      images(limit: $imagesLimit, offset: $imagesOffset) {\n        id\n        url\n      }\n    }\n  }\n": typeof types.SuggestedFragrancesDocument,
    "\n  mutation UpsertUser($email: String!, $cognitoId: String!) {\n    upsertUser(email: $email, cognitoId: $cognitoId) {\n      id\n      email\n      username\n      cognitoId\n    }\n  }\n": typeof types.UpsertUserDocument,
    "\n  query UserPreview(\n    $id: Int!, \n    $collectionsLimit: Int = 6, \n    $collectionsOffset: Int = 0,\n    $fragrancesLimit: Int = 4,\n    $fragrancesOffset: Int = 0,\n    $fragranceImagesLimit: Int = 1,\n    $fragranceImagesOffset: Int = 0,\n    $reviewsLimit: Int = 10,\n    $reviewsOffset: Int = 0,\n    $likesLimit: Int = 10,\n    $likesOffset: Int = 0\n    ) {\n    user(id: $id) {\n      id\n      username\n\n      followers\n      following\n      collections(limit: $collectionsLimit, offset: $collectionsOffset) {\n        id\n        name\n        fragrances(limit: $fragrancesLimit, offset: $fragrancesOffset) {\n          images(limit: $fragranceImagesLimit, offset: $fragranceImagesOffset) {\n            id\n            url\n          }\n        }\n        user {\n          username\n        }\n      }\n      reviews(limit: $reviewsLimit, offset: $reviewsOffset) {\n        id\n        rating\n        review\n        votes\n        author\n        myVote\n        dCreated\n        dModified\n      }\n      likes(limit: $likesLimit, offset: $likesOffset) {\n        id\n        brand\n        name\n        images(limit: $fragranceImagesLimit, offset: $fragranceImagesOffset) {\n          id\n          url\n        }\n        vote {\n          id\n          likes\n          dislikes\n          myVote\n        }\n      }\n    }\n  }\n": typeof types.UserPreviewDocument,
    "\n  mutation VoteOnAccord($fragranceId: Int!, $accordId: Int!, $myVote: Boolean!) {\n    voteOnAccord(fragranceId: $fragranceId, accordId: $accordId, myVote: $myVote) {\n      id\n      votes\n      myVote\n    }\n  }\n": typeof types.VoteOnAccordDocument,
    "\n  mutation VoteOnFragance($fragranceId: Int!, $myVote: Boolean) {\n    voteOnFragrance(fragranceId: $fragranceId, myVote: $myVote) {\n      id\n      likes\n      dislikes\n      myVote\n    } \n  }\n": typeof types.VoteOnFraganceDocument,
    "\n  mutation VoteOnNote($fragranceId: Int!, $noteId: Int!, $layer: NoteLayer!, $myVote: Boolean!) {\n    voteOnNote(fragranceId: $fragranceId, noteId: $noteId, layer: $layer, myVote: $myVote) {\n      id\n      noteId\n      layer\n      votes\n      myVote\n    }\n  }\n": typeof types.VoteOnNoteDocument,
    "\n  mutation VoteOnReview($reviewId: Int!, $myVote: Boolean) {\n    voteOnReview(reviewId: $reviewId, myVote: $myVote) {\n      id\n      votes\n      myVote\n    }\n  }\n": typeof types.VoteOnReviewDocument,
    "\n  mutation VoteOnTrait($fragranceId: Int!, $trait: FragranceTraitType!, $myVote: Float!) {\n    voteOnTrait(fragranceId: $fragranceId, trait: $trait, myVote: $myVote) {\n      id\n      trait\n      value\n      myVote\n    }\n  }\n": typeof types.VoteOnTraitDocument,
};
const documents: Documents = {
    "\n  query Fragrance(\n    $id: Int!, \n    $imagesLimit: Int = 5, \n    $imagesOffset: Int = 0,\n    $notesLimit: Int = 8,\n    $notesOffset: Int = 0,\n    $notesFill: Boolean = false,\n    $accordsLimit: Int = 8,\n    $accordsOffset: Int = 0,\n    $accordsFill: Boolean = false,\n    $reviewsLimit: Int = 10,\n    $reviewsOffset: Int = 0) {\n    fragrance(id: $id) {\n      id\n      brand\n      name\n      rating\n      reviewsCount\n\n      vote {\n        id\n        likes\n        dislikes\n        myVote\n      }\n\n      images(limit: $imagesLimit, offset: $imagesOffset) {\n        id\n        url\n      }\n\n      traits {\n        gender {\n          id\n          trait\n          value\n          myVote\n        }\n        longevity {\n          id\n          trait\n          value\n          myVote\n        }\n        sillage {\n          id\n          trait\n          value\n          myVote\n        }\n        complexity {\n          id\n          trait\n          value\n          myVote\n        }\n        balance {\n          id\n          trait\n          value\n          myVote\n        }\n        allure {\n          id\n          trait\n          value\n          myVote\n        }\n      }\n\n      notes {\n        top(limit: $notesLimit, offset: $notesOffset, fill: $notesFill) {\n          id\n          noteId\n          layer\n          name\n          votes\n          myVote\n        }\n        middle(limit: $notesLimit, offset: $notesOffset, fill: $notesFill) {\n          id\n          noteId\n          layer\n          name\n          votes\n          myVote\n        }\n        base(limit: $notesLimit, offset: $notesOffset, fill: $notesFill) {\n          id\n          noteId\n          layer\n          name\n          votes\n          myVote\n        }\n      }\n\n      accords(limit: $accordsLimit, offset: $accordsOffset, fill: $accordsFill) {\n        id\n        accordId\n        name\n        color\n        votes\n        myVote\n      }\n\n      reviews(limit: $reviewsLimit, offset: $reviewsOffset) {\n        id\n        rating\n        review\n        votes\n        dCreated\n        dModified\n        dDeleted\n        author \n        myVote\n      }\n    }\n  }\n": types.FragranceDocument,
    "\n  query FragranceAccords(\n    $id: Int!, \n    $limit: Int = 30, \n    $offset: Int = 0, \n    $fill: Boolean = false) {\n    fragrance(id: $id) {\n      id\n\n      accords(limit: $limit, offset: $offset, fill: $fill) {\n        id\n        accordId\n        name\n        color\n        votes\n        myVote\n      }\n    }\n  }\n": types.FragranceAccordsDocument,
    "\n  query FragranceNotes(\n    $id: Int!, \n    $limit: Int = 12, \n    $offset: Int = 0, \n    $fill: Boolean = false,\n    $includeTop: Boolean!,\n    $includeMiddle: Boolean!,\n    $includeBase: Boolean!\n  ) {\n    fragrance(id: $id) {\n      id\n\n      notes {\n        top(limit: $limit, offset: $offset, fill: $fill) @include(if: $includeTop) {\n          id\n          noteId\n          name\n          layer\n          votes\n          myVote\n        }\n        middle(limit: $limit, offset: $offset, fill: $fill) @include(if: $includeMiddle) {\n          id\n          noteId\n          name\n          layer\n          votes\n          myVote\n        }\n        base(limit: $limit, offset: $offset, fill: $fill) @include(if: $includeBase) {\n          id\n          noteId\n          name\n          layer\n          votes\n          myVote\n        }\n      } \n    }\n  }\n": types.FragranceNotesDocument,
    "\n  query FragranceReviews($fragranceId: Int!, $limit: Int = 10, $offset: Int = 0) {\n    fragrance(id: $fragranceId) {\n      id\n      brand\n      name\n      rating\n      reviewsCount\n      reviews(limit: $limit, offset: $offset) {\n        id\n        rating\n        review\n        votes\n        dCreated\n        dModified\n        dDeleted\n        author \n        myVote\n      }\n      reviewDistribution {\n        one\n        two\n        three\n        four\n        five\n      }\n    }\n  }\n": types.FragranceReviewsDocument,
    "\n  query FragranceTraits($id: Int!) {\n    fragrance(id: $id) {\n      id\n      traits {\n        gender {\n          id\n          trait\n          value\n          myVote\n        }\n        longevity {\n          id\n          trait\n          value\n          myVote\n        }\n        sillage {\n          id\n          trait\n          value\n          myVote\n        }\n        complexity {\n          id\n          trait\n          value\n          myVote\n        }\n        balance {\n          id\n          trait\n          value\n          myVote\n        }\n        allure {\n          id\n          trait\n          value\n          myVote\n        }\n      }\n    }\n  }\n": types.FragranceTraitsDocument,
    "\n  query MyReview($fragranceId: Int!) {\n    fragrance(id: $fragranceId) {\n      id\n      myReview {\n        id\n        rating\n        review\n        votes\n        dCreated\n        dModified\n        dDeleted\n        author \n        myVote\n      }\n    }\n  }\n": types.MyReviewDocument,
    "\n  mutation ReviewFragrance($fragranceId: Int!, $myRating: Int!, $myReview: String!) {\n    reviewFragrance(fragranceId: $fragranceId, myRating: $myRating, myReview: $myReview) {\n      id\n      rating\n      review\n      votes\n      myVote\n      dCreated\n      dModified\n      author \n    }\n  }\n": types.ReviewFragranceDocument,
    "\n  query SuggestedFragrances(\n    $limit: Int = 10, \n    $offset: Int = 0, \n    $imagesLimit: Int = 1,\n    $imagesOffset: Int = 0) {\n    fragrances(limit: $limit, offset: $offset) {\n      id\n      brand\n      name\n\n      vote {\n        id\n        likes\n        dislikes\n        myVote\n      } \n\n      images(limit: $imagesLimit, offset: $imagesOffset) {\n        id\n        url\n      }\n    }\n  }\n": types.SuggestedFragrancesDocument,
    "\n  mutation UpsertUser($email: String!, $cognitoId: String!) {\n    upsertUser(email: $email, cognitoId: $cognitoId) {\n      id\n      email\n      username\n      cognitoId\n    }\n  }\n": types.UpsertUserDocument,
    "\n  query UserPreview(\n    $id: Int!, \n    $collectionsLimit: Int = 6, \n    $collectionsOffset: Int = 0,\n    $fragrancesLimit: Int = 4,\n    $fragrancesOffset: Int = 0,\n    $fragranceImagesLimit: Int = 1,\n    $fragranceImagesOffset: Int = 0,\n    $reviewsLimit: Int = 10,\n    $reviewsOffset: Int = 0,\n    $likesLimit: Int = 10,\n    $likesOffset: Int = 0\n    ) {\n    user(id: $id) {\n      id\n      username\n\n      followers\n      following\n      collections(limit: $collectionsLimit, offset: $collectionsOffset) {\n        id\n        name\n        fragrances(limit: $fragrancesLimit, offset: $fragrancesOffset) {\n          images(limit: $fragranceImagesLimit, offset: $fragranceImagesOffset) {\n            id\n            url\n          }\n        }\n        user {\n          username\n        }\n      }\n      reviews(limit: $reviewsLimit, offset: $reviewsOffset) {\n        id\n        rating\n        review\n        votes\n        author\n        myVote\n        dCreated\n        dModified\n      }\n      likes(limit: $likesLimit, offset: $likesOffset) {\n        id\n        brand\n        name\n        images(limit: $fragranceImagesLimit, offset: $fragranceImagesOffset) {\n          id\n          url\n        }\n        vote {\n          id\n          likes\n          dislikes\n          myVote\n        }\n      }\n    }\n  }\n": types.UserPreviewDocument,
    "\n  mutation VoteOnAccord($fragranceId: Int!, $accordId: Int!, $myVote: Boolean!) {\n    voteOnAccord(fragranceId: $fragranceId, accordId: $accordId, myVote: $myVote) {\n      id\n      votes\n      myVote\n    }\n  }\n": types.VoteOnAccordDocument,
    "\n  mutation VoteOnFragance($fragranceId: Int!, $myVote: Boolean) {\n    voteOnFragrance(fragranceId: $fragranceId, myVote: $myVote) {\n      id\n      likes\n      dislikes\n      myVote\n    } \n  }\n": types.VoteOnFraganceDocument,
    "\n  mutation VoteOnNote($fragranceId: Int!, $noteId: Int!, $layer: NoteLayer!, $myVote: Boolean!) {\n    voteOnNote(fragranceId: $fragranceId, noteId: $noteId, layer: $layer, myVote: $myVote) {\n      id\n      noteId\n      layer\n      votes\n      myVote\n    }\n  }\n": types.VoteOnNoteDocument,
    "\n  mutation VoteOnReview($reviewId: Int!, $myVote: Boolean) {\n    voteOnReview(reviewId: $reviewId, myVote: $myVote) {\n      id\n      votes\n      myVote\n    }\n  }\n": types.VoteOnReviewDocument,
    "\n  mutation VoteOnTrait($fragranceId: Int!, $trait: FragranceTraitType!, $myVote: Float!) {\n    voteOnTrait(fragranceId: $fragranceId, trait: $trait, myVote: $myVote) {\n      id\n      trait\n      value\n      myVote\n    }\n  }\n": types.VoteOnTraitDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Fragrance(\n    $id: Int!, \n    $imagesLimit: Int = 5, \n    $imagesOffset: Int = 0,\n    $notesLimit: Int = 8,\n    $notesOffset: Int = 0,\n    $notesFill: Boolean = false,\n    $accordsLimit: Int = 8,\n    $accordsOffset: Int = 0,\n    $accordsFill: Boolean = false,\n    $reviewsLimit: Int = 10,\n    $reviewsOffset: Int = 0) {\n    fragrance(id: $id) {\n      id\n      brand\n      name\n      rating\n      reviewsCount\n\n      vote {\n        id\n        likes\n        dislikes\n        myVote\n      }\n\n      images(limit: $imagesLimit, offset: $imagesOffset) {\n        id\n        url\n      }\n\n      traits {\n        gender {\n          id\n          trait\n          value\n          myVote\n        }\n        longevity {\n          id\n          trait\n          value\n          myVote\n        }\n        sillage {\n          id\n          trait\n          value\n          myVote\n        }\n        complexity {\n          id\n          trait\n          value\n          myVote\n        }\n        balance {\n          id\n          trait\n          value\n          myVote\n        }\n        allure {\n          id\n          trait\n          value\n          myVote\n        }\n      }\n\n      notes {\n        top(limit: $notesLimit, offset: $notesOffset, fill: $notesFill) {\n          id\n          noteId\n          layer\n          name\n          votes\n          myVote\n        }\n        middle(limit: $notesLimit, offset: $notesOffset, fill: $notesFill) {\n          id\n          noteId\n          layer\n          name\n          votes\n          myVote\n        }\n        base(limit: $notesLimit, offset: $notesOffset, fill: $notesFill) {\n          id\n          noteId\n          layer\n          name\n          votes\n          myVote\n        }\n      }\n\n      accords(limit: $accordsLimit, offset: $accordsOffset, fill: $accordsFill) {\n        id\n        accordId\n        name\n        color\n        votes\n        myVote\n      }\n\n      reviews(limit: $reviewsLimit, offset: $reviewsOffset) {\n        id\n        rating\n        review\n        votes\n        dCreated\n        dModified\n        dDeleted\n        author \n        myVote\n      }\n    }\n  }\n"): (typeof documents)["\n  query Fragrance(\n    $id: Int!, \n    $imagesLimit: Int = 5, \n    $imagesOffset: Int = 0,\n    $notesLimit: Int = 8,\n    $notesOffset: Int = 0,\n    $notesFill: Boolean = false,\n    $accordsLimit: Int = 8,\n    $accordsOffset: Int = 0,\n    $accordsFill: Boolean = false,\n    $reviewsLimit: Int = 10,\n    $reviewsOffset: Int = 0) {\n    fragrance(id: $id) {\n      id\n      brand\n      name\n      rating\n      reviewsCount\n\n      vote {\n        id\n        likes\n        dislikes\n        myVote\n      }\n\n      images(limit: $imagesLimit, offset: $imagesOffset) {\n        id\n        url\n      }\n\n      traits {\n        gender {\n          id\n          trait\n          value\n          myVote\n        }\n        longevity {\n          id\n          trait\n          value\n          myVote\n        }\n        sillage {\n          id\n          trait\n          value\n          myVote\n        }\n        complexity {\n          id\n          trait\n          value\n          myVote\n        }\n        balance {\n          id\n          trait\n          value\n          myVote\n        }\n        allure {\n          id\n          trait\n          value\n          myVote\n        }\n      }\n\n      notes {\n        top(limit: $notesLimit, offset: $notesOffset, fill: $notesFill) {\n          id\n          noteId\n          layer\n          name\n          votes\n          myVote\n        }\n        middle(limit: $notesLimit, offset: $notesOffset, fill: $notesFill) {\n          id\n          noteId\n          layer\n          name\n          votes\n          myVote\n        }\n        base(limit: $notesLimit, offset: $notesOffset, fill: $notesFill) {\n          id\n          noteId\n          layer\n          name\n          votes\n          myVote\n        }\n      }\n\n      accords(limit: $accordsLimit, offset: $accordsOffset, fill: $accordsFill) {\n        id\n        accordId\n        name\n        color\n        votes\n        myVote\n      }\n\n      reviews(limit: $reviewsLimit, offset: $reviewsOffset) {\n        id\n        rating\n        review\n        votes\n        dCreated\n        dModified\n        dDeleted\n        author \n        myVote\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query FragranceAccords(\n    $id: Int!, \n    $limit: Int = 30, \n    $offset: Int = 0, \n    $fill: Boolean = false) {\n    fragrance(id: $id) {\n      id\n\n      accords(limit: $limit, offset: $offset, fill: $fill) {\n        id\n        accordId\n        name\n        color\n        votes\n        myVote\n      }\n    }\n  }\n"): (typeof documents)["\n  query FragranceAccords(\n    $id: Int!, \n    $limit: Int = 30, \n    $offset: Int = 0, \n    $fill: Boolean = false) {\n    fragrance(id: $id) {\n      id\n\n      accords(limit: $limit, offset: $offset, fill: $fill) {\n        id\n        accordId\n        name\n        color\n        votes\n        myVote\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query FragranceNotes(\n    $id: Int!, \n    $limit: Int = 12, \n    $offset: Int = 0, \n    $fill: Boolean = false,\n    $includeTop: Boolean!,\n    $includeMiddle: Boolean!,\n    $includeBase: Boolean!\n  ) {\n    fragrance(id: $id) {\n      id\n\n      notes {\n        top(limit: $limit, offset: $offset, fill: $fill) @include(if: $includeTop) {\n          id\n          noteId\n          name\n          layer\n          votes\n          myVote\n        }\n        middle(limit: $limit, offset: $offset, fill: $fill) @include(if: $includeMiddle) {\n          id\n          noteId\n          name\n          layer\n          votes\n          myVote\n        }\n        base(limit: $limit, offset: $offset, fill: $fill) @include(if: $includeBase) {\n          id\n          noteId\n          name\n          layer\n          votes\n          myVote\n        }\n      } \n    }\n  }\n"): (typeof documents)["\n  query FragranceNotes(\n    $id: Int!, \n    $limit: Int = 12, \n    $offset: Int = 0, \n    $fill: Boolean = false,\n    $includeTop: Boolean!,\n    $includeMiddle: Boolean!,\n    $includeBase: Boolean!\n  ) {\n    fragrance(id: $id) {\n      id\n\n      notes {\n        top(limit: $limit, offset: $offset, fill: $fill) @include(if: $includeTop) {\n          id\n          noteId\n          name\n          layer\n          votes\n          myVote\n        }\n        middle(limit: $limit, offset: $offset, fill: $fill) @include(if: $includeMiddle) {\n          id\n          noteId\n          name\n          layer\n          votes\n          myVote\n        }\n        base(limit: $limit, offset: $offset, fill: $fill) @include(if: $includeBase) {\n          id\n          noteId\n          name\n          layer\n          votes\n          myVote\n        }\n      } \n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query FragranceReviews($fragranceId: Int!, $limit: Int = 10, $offset: Int = 0) {\n    fragrance(id: $fragranceId) {\n      id\n      brand\n      name\n      rating\n      reviewsCount\n      reviews(limit: $limit, offset: $offset) {\n        id\n        rating\n        review\n        votes\n        dCreated\n        dModified\n        dDeleted\n        author \n        myVote\n      }\n      reviewDistribution {\n        one\n        two\n        three\n        four\n        five\n      }\n    }\n  }\n"): (typeof documents)["\n  query FragranceReviews($fragranceId: Int!, $limit: Int = 10, $offset: Int = 0) {\n    fragrance(id: $fragranceId) {\n      id\n      brand\n      name\n      rating\n      reviewsCount\n      reviews(limit: $limit, offset: $offset) {\n        id\n        rating\n        review\n        votes\n        dCreated\n        dModified\n        dDeleted\n        author \n        myVote\n      }\n      reviewDistribution {\n        one\n        two\n        three\n        four\n        five\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query FragranceTraits($id: Int!) {\n    fragrance(id: $id) {\n      id\n      traits {\n        gender {\n          id\n          trait\n          value\n          myVote\n        }\n        longevity {\n          id\n          trait\n          value\n          myVote\n        }\n        sillage {\n          id\n          trait\n          value\n          myVote\n        }\n        complexity {\n          id\n          trait\n          value\n          myVote\n        }\n        balance {\n          id\n          trait\n          value\n          myVote\n        }\n        allure {\n          id\n          trait\n          value\n          myVote\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query FragranceTraits($id: Int!) {\n    fragrance(id: $id) {\n      id\n      traits {\n        gender {\n          id\n          trait\n          value\n          myVote\n        }\n        longevity {\n          id\n          trait\n          value\n          myVote\n        }\n        sillage {\n          id\n          trait\n          value\n          myVote\n        }\n        complexity {\n          id\n          trait\n          value\n          myVote\n        }\n        balance {\n          id\n          trait\n          value\n          myVote\n        }\n        allure {\n          id\n          trait\n          value\n          myVote\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query MyReview($fragranceId: Int!) {\n    fragrance(id: $fragranceId) {\n      id\n      myReview {\n        id\n        rating\n        review\n        votes\n        dCreated\n        dModified\n        dDeleted\n        author \n        myVote\n      }\n    }\n  }\n"): (typeof documents)["\n  query MyReview($fragranceId: Int!) {\n    fragrance(id: $fragranceId) {\n      id\n      myReview {\n        id\n        rating\n        review\n        votes\n        dCreated\n        dModified\n        dDeleted\n        author \n        myVote\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation ReviewFragrance($fragranceId: Int!, $myRating: Int!, $myReview: String!) {\n    reviewFragrance(fragranceId: $fragranceId, myRating: $myRating, myReview: $myReview) {\n      id\n      rating\n      review\n      votes\n      myVote\n      dCreated\n      dModified\n      author \n    }\n  }\n"): (typeof documents)["\n  mutation ReviewFragrance($fragranceId: Int!, $myRating: Int!, $myReview: String!) {\n    reviewFragrance(fragranceId: $fragranceId, myRating: $myRating, myReview: $myReview) {\n      id\n      rating\n      review\n      votes\n      myVote\n      dCreated\n      dModified\n      author \n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query SuggestedFragrances(\n    $limit: Int = 10, \n    $offset: Int = 0, \n    $imagesLimit: Int = 1,\n    $imagesOffset: Int = 0) {\n    fragrances(limit: $limit, offset: $offset) {\n      id\n      brand\n      name\n\n      vote {\n        id\n        likes\n        dislikes\n        myVote\n      } \n\n      images(limit: $imagesLimit, offset: $imagesOffset) {\n        id\n        url\n      }\n    }\n  }\n"): (typeof documents)["\n  query SuggestedFragrances(\n    $limit: Int = 10, \n    $offset: Int = 0, \n    $imagesLimit: Int = 1,\n    $imagesOffset: Int = 0) {\n    fragrances(limit: $limit, offset: $offset) {\n      id\n      brand\n      name\n\n      vote {\n        id\n        likes\n        dislikes\n        myVote\n      } \n\n      images(limit: $imagesLimit, offset: $imagesOffset) {\n        id\n        url\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpsertUser($email: String!, $cognitoId: String!) {\n    upsertUser(email: $email, cognitoId: $cognitoId) {\n      id\n      email\n      username\n      cognitoId\n    }\n  }\n"): (typeof documents)["\n  mutation UpsertUser($email: String!, $cognitoId: String!) {\n    upsertUser(email: $email, cognitoId: $cognitoId) {\n      id\n      email\n      username\n      cognitoId\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query UserPreview(\n    $id: Int!, \n    $collectionsLimit: Int = 6, \n    $collectionsOffset: Int = 0,\n    $fragrancesLimit: Int = 4,\n    $fragrancesOffset: Int = 0,\n    $fragranceImagesLimit: Int = 1,\n    $fragranceImagesOffset: Int = 0,\n    $reviewsLimit: Int = 10,\n    $reviewsOffset: Int = 0,\n    $likesLimit: Int = 10,\n    $likesOffset: Int = 0\n    ) {\n    user(id: $id) {\n      id\n      username\n\n      followers\n      following\n      collections(limit: $collectionsLimit, offset: $collectionsOffset) {\n        id\n        name\n        fragrances(limit: $fragrancesLimit, offset: $fragrancesOffset) {\n          images(limit: $fragranceImagesLimit, offset: $fragranceImagesOffset) {\n            id\n            url\n          }\n        }\n        user {\n          username\n        }\n      }\n      reviews(limit: $reviewsLimit, offset: $reviewsOffset) {\n        id\n        rating\n        review\n        votes\n        author\n        myVote\n        dCreated\n        dModified\n      }\n      likes(limit: $likesLimit, offset: $likesOffset) {\n        id\n        brand\n        name\n        images(limit: $fragranceImagesLimit, offset: $fragranceImagesOffset) {\n          id\n          url\n        }\n        vote {\n          id\n          likes\n          dislikes\n          myVote\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query UserPreview(\n    $id: Int!, \n    $collectionsLimit: Int = 6, \n    $collectionsOffset: Int = 0,\n    $fragrancesLimit: Int = 4,\n    $fragrancesOffset: Int = 0,\n    $fragranceImagesLimit: Int = 1,\n    $fragranceImagesOffset: Int = 0,\n    $reviewsLimit: Int = 10,\n    $reviewsOffset: Int = 0,\n    $likesLimit: Int = 10,\n    $likesOffset: Int = 0\n    ) {\n    user(id: $id) {\n      id\n      username\n\n      followers\n      following\n      collections(limit: $collectionsLimit, offset: $collectionsOffset) {\n        id\n        name\n        fragrances(limit: $fragrancesLimit, offset: $fragrancesOffset) {\n          images(limit: $fragranceImagesLimit, offset: $fragranceImagesOffset) {\n            id\n            url\n          }\n        }\n        user {\n          username\n        }\n      }\n      reviews(limit: $reviewsLimit, offset: $reviewsOffset) {\n        id\n        rating\n        review\n        votes\n        author\n        myVote\n        dCreated\n        dModified\n      }\n      likes(limit: $likesLimit, offset: $likesOffset) {\n        id\n        brand\n        name\n        images(limit: $fragranceImagesLimit, offset: $fragranceImagesOffset) {\n          id\n          url\n        }\n        vote {\n          id\n          likes\n          dislikes\n          myVote\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation VoteOnAccord($fragranceId: Int!, $accordId: Int!, $myVote: Boolean!) {\n    voteOnAccord(fragranceId: $fragranceId, accordId: $accordId, myVote: $myVote) {\n      id\n      votes\n      myVote\n    }\n  }\n"): (typeof documents)["\n  mutation VoteOnAccord($fragranceId: Int!, $accordId: Int!, $myVote: Boolean!) {\n    voteOnAccord(fragranceId: $fragranceId, accordId: $accordId, myVote: $myVote) {\n      id\n      votes\n      myVote\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation VoteOnFragance($fragranceId: Int!, $myVote: Boolean) {\n    voteOnFragrance(fragranceId: $fragranceId, myVote: $myVote) {\n      id\n      likes\n      dislikes\n      myVote\n    } \n  }\n"): (typeof documents)["\n  mutation VoteOnFragance($fragranceId: Int!, $myVote: Boolean) {\n    voteOnFragrance(fragranceId: $fragranceId, myVote: $myVote) {\n      id\n      likes\n      dislikes\n      myVote\n    } \n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation VoteOnNote($fragranceId: Int!, $noteId: Int!, $layer: NoteLayer!, $myVote: Boolean!) {\n    voteOnNote(fragranceId: $fragranceId, noteId: $noteId, layer: $layer, myVote: $myVote) {\n      id\n      noteId\n      layer\n      votes\n      myVote\n    }\n  }\n"): (typeof documents)["\n  mutation VoteOnNote($fragranceId: Int!, $noteId: Int!, $layer: NoteLayer!, $myVote: Boolean!) {\n    voteOnNote(fragranceId: $fragranceId, noteId: $noteId, layer: $layer, myVote: $myVote) {\n      id\n      noteId\n      layer\n      votes\n      myVote\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation VoteOnReview($reviewId: Int!, $myVote: Boolean) {\n    voteOnReview(reviewId: $reviewId, myVote: $myVote) {\n      id\n      votes\n      myVote\n    }\n  }\n"): (typeof documents)["\n  mutation VoteOnReview($reviewId: Int!, $myVote: Boolean) {\n    voteOnReview(reviewId: $reviewId, myVote: $myVote) {\n      id\n      votes\n      myVote\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation VoteOnTrait($fragranceId: Int!, $trait: FragranceTraitType!, $myVote: Float!) {\n    voteOnTrait(fragranceId: $fragranceId, trait: $trait, myVote: $myVote) {\n      id\n      trait\n      value\n      myVote\n    }\n  }\n"): (typeof documents)["\n  mutation VoteOnTrait($fragranceId: Int!, $trait: FragranceTraitType!, $myVote: Float!) {\n    voteOnTrait(fragranceId: $fragranceId, trait: $trait, myVote: $myVote) {\n      id\n      trait\n      value\n      myVote\n    }\n  }\n"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;